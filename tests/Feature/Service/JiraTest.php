<?php

namespace Tests\Feature\Service;

use App\Models\Issue;
use App\Services\Jira;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

/**
 * Let's make sure Jira doesn't start returning bad data
 */
class JiraTest extends TestCase
{
    /**
     * This would be better as a contract test, but it does enough to test the getIssues method
     * @return void
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function testGetIssues()
    {
        // Arrange
        // This fake was generated by saving the response body from a real call to Jira
        Http::fake(['*' => Http::response($this->getFixture('fakeJiraResponse.json'))]);
        $mockedIssue = \Mockery::mock(Issue::class);
            $mockedIssue->shouldReceive('getLastUpdatedDate')
            ->andReturn(null);

        // Act
        $jiraService = new Jira(1, $mockedIssue);
        $response = $jiraService->getIssues();
        $this->setFixture('fakeJiraResponseIssues.json', json_encode($response));

        // Assert
        self::assertEqualsCanonicalizing($this->getFixture('fakeJiraResponseIssues.json'), $response);
    }
}
