<?php

namespace Tests\Feature\Service;

use App\Models\Issue;
use App\Services\Jira;
use Carbon\CarbonImmutable;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

/**
 * Let's make sure Jira doesn't start returning bad data
 */
class JiraTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * This would be better as a contract test, but it does enough to test the getIssues method
     *
     * @return void
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function testGetIssues()
    {
        // Arrange
        // This fake was generated by saving the response body from a real call to Jira
        Http::fake(['*' => Http::response($this->getFixture('fakeJiraResponse.json'))]);
        $mockedIssue = \Mockery::mock(Issue::class);
        $mockedIssue->shouldReceive('getLastUpdatedDate')
            ->andReturn(null);

        // Act
        $jiraService = new Jira(1, $mockedIssue);
        $response = $jiraService->getIssues();
        $this->setFixture('fakeJiraResponseIssues.json', json_encode($response));

        // Assert
        self::assertEqualsCanonicalizing($this->getFixture('fakeJiraResponseIssues.json'), $response);
    }

    public function dataTestGetJql(): array
    {
        return [
            'Standard' => [
                'UIUX',
                2,
                '-3h'
            ]
        ];
    }

    /**
     * @dataProvider dataTestGetJql
     * @return void
     */
    public function testGetJql(string $project, int $lastUpdateInHours, string $hoursInJql)
    {
        // Save an issue to the DB
        Issue::factory([
            'last_jira_update' => CarbonImmutable::now()->subHours($lastUpdateInHours),
        ])->create();
        $jiraService = new Jira();

        // Assert the last updated date value is in the jql
        self::assertStringContainsString($hoursInJql, $jiraService->getJql());
    }
}
